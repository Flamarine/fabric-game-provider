plugins {
	id("java-library")
	id("maven-publish")
}

group = "net.betterthanadventure"
base.archivesName = "fabric-game-provider-bta"
version = project.version

repositories {
	mavenCentral()
	maven {
		url = "https://maven.fabricmc.net"
		name = "FabricMC"
	}
}

sourceSets {
	main
	common

	client.compileClasspath += main.output + common.output
	server.compileClasspath += main.output + common.output
}

dependencies {
	implementation("org.ow2.asm:asm:${project.asm_version}")
	implementation("org.ow2.asm:asm-analysis:${project.asm_version}")
	implementation("org.ow2.asm:asm-commons:${project.asm_version}")
	implementation("org.ow2.asm:asm-tree:${project.asm_version}")
	implementation("org.ow2.asm:asm-util:${project.asm_version}")
	clientImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}")
	serverImplementation("net.fabricmc:fabric-loader:${project.fabric_loader_version}")
}

sourceSets.all { sourceSet ->
	def compileConfig = configurations[sourceSet.compileClasspathConfigurationName]
	compileConfig.extendsFrom(configurations.implementation)
}

sourceSets.common { sourceSet ->
	def compileConfig = configurations[sourceSet.compileClasspathConfigurationName]
	compileConfig.extendsFrom(
			configurations.implementation,
			configurations.clientImplementation,
			configurations.serverImplementation
	)
}

tasks.withType(Jar).configureEach {it.enabled = false}

tasks.withType(Test).configureEach {it.enabled = false}

[sourceSets.client, sourceSets.server].forEach { set ->
	tasks.register("${set.name}Jar", Jar) {
		it.enabled = true
		it.group = "build"
		tasks.build.dependsOn(this)
		it.archiveClassifier = set.name
		it.from(set.output)
		it.from(sourceSets.common.output)
		it.from(file("LICENSE"))
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"

	if (JavaVersion.current().isJava9Compatible()) {
		it.options.release = 8
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
}

publishing {
	publications { pubContainer ->
        pubContainer.create("mavenJava", MavenPublication) { publication ->
            publication.artifactId = "fabric-game-provider-bta"
            publication.version = project.version
            publication.artifact(tasks["clientJar"])
            publication.artifact(tasks["serverJar"])
            publication.pom.withXml {
                Node provider = it.asNode()
                def deps = provider.get("dependencies")
                if (deps != null || deps.isEmpty()) {
					deps = provider.appendNode("dependencies") as Node
				}
                Node fabricDependency = deps.appendNode("dependency")
                fabricDependency.appendNode("groupId", "net.fabricmc")
                fabricDependency.appendNode("artifactId", "fabric-loader")
                fabricDependency.appendNode("version", fabric_loader_version)
                fabricDependency.appendNode("scope", "compile")
            }
        }
	}
}
